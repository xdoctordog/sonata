<?php

namespace Proxies\__CG__\Application\Sonata\PageBundle\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Page extends \Application\Sonata\PageBundle\Entity\Page implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = array();



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return array('__isInitialized__', 'id', 'createdAt', 'updatedAt', 'routeName', 'pageAlias', 'type', 'name', 'title', 'slug', 'url', 'customUrl', 'requestMethod', 'metaKeyword', 'metaDescription', 'javascript', 'stylesheet', 'rawHeaders', 'headers', 'enabled', 'blocks', 'sources', 'parent', 'parents', 'target', 'children', 'snapshots', 'templateCode', 'position', 'decorate', 'site', 'edited');
        }

        return array('__isInitialized__', 'id', 'createdAt', 'updatedAt', 'routeName', 'pageAlias', 'type', 'name', 'title', 'slug', 'url', 'customUrl', 'requestMethod', 'metaKeyword', 'metaDescription', 'javascript', 'stylesheet', 'rawHeaders', 'headers', 'enabled', 'blocks', 'sources', 'parent', 'parents', 'target', 'children', 'snapshots', 'templateCode', 'position', 'decorate', 'site', 'edited');
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Page $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', array());
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', array());
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', array());

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function prePersist()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'prePersist', array());

        return parent::prePersist();
    }

    /**
     * {@inheritDoc}
     */
    public function preUpdate()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'preUpdate', array());

        return parent::preUpdate();
    }

    /**
     * {@inheritDoc}
     */
    public function setId($id)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setId', array($id));

        return parent::setId($id);
    }

    /**
     * {@inheritDoc}
     */
    public function setRouteName($routeName)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setRouteName', array($routeName));

        return parent::setRouteName($routeName);
    }

    /**
     * {@inheritDoc}
     */
    public function getRouteName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getRouteName', array());

        return parent::getRouteName();
    }

    /**
     * {@inheritDoc}
     */
    public function setPageAlias($pageAlias)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPageAlias', array($pageAlias));

        return parent::setPageAlias($pageAlias);
    }

    /**
     * {@inheritDoc}
     */
    public function getPageAlias()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPageAlias', array());

        return parent::getPageAlias();
    }

    /**
     * {@inheritDoc}
     */
    public function setType($type)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setType', array($type));

        return parent::setType($type);
    }

    /**
     * {@inheritDoc}
     */
    public function getType()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getType', array());

        return parent::getType();
    }

    /**
     * {@inheritDoc}
     */
    public function setEnabled($enabled)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setEnabled', array($enabled));

        return parent::setEnabled($enabled);
    }

    /**
     * {@inheritDoc}
     */
    public function getEnabled()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getEnabled', array());

        return parent::getEnabled();
    }

    /**
     * {@inheritDoc}
     */
    public function setName($name)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setName', array($name));

        return parent::setName($name);
    }

    /**
     * {@inheritDoc}
     */
    public function getName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getName', array());

        return parent::getName();
    }

    /**
     * {@inheritDoc}
     */
    public function setSlug($slug)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setSlug', array($slug));

        return parent::setSlug($slug);
    }

    /**
     * {@inheritDoc}
     */
    public function getSlug()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSlug', array());

        return parent::getSlug();
    }

    /**
     * {@inheritDoc}
     */
    public function setCustomUrl($customUrl)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCustomUrl', array($customUrl));

        return parent::setCustomUrl($customUrl);
    }

    /**
     * {@inheritDoc}
     */
    public function getCustomUrl()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCustomUrl', array());

        return parent::getCustomUrl();
    }

    /**
     * {@inheritDoc}
     */
    public function setRequestMethod($requestMethod)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setRequestMethod', array($requestMethod));

        return parent::setRequestMethod($requestMethod);
    }

    /**
     * {@inheritDoc}
     */
    public function getRequestMethod()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getRequestMethod', array());

        return parent::getRequestMethod();
    }

    /**
     * {@inheritDoc}
     */
    public function setMetaKeyword($metaKeyword)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setMetaKeyword', array($metaKeyword));

        return parent::setMetaKeyword($metaKeyword);
    }

    /**
     * {@inheritDoc}
     */
    public function getMetaKeyword()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getMetaKeyword', array());

        return parent::getMetaKeyword();
    }

    /**
     * {@inheritDoc}
     */
    public function setMetaDescription($metaDescription)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setMetaDescription', array($metaDescription));

        return parent::setMetaDescription($metaDescription);
    }

    /**
     * {@inheritDoc}
     */
    public function getMetaDescription()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getMetaDescription', array());

        return parent::getMetaDescription();
    }

    /**
     * {@inheritDoc}
     */
    public function setJavascript($javascript)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setJavascript', array($javascript));

        return parent::setJavascript($javascript);
    }

    /**
     * {@inheritDoc}
     */
    public function getJavascript()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getJavascript', array());

        return parent::getJavascript();
    }

    /**
     * {@inheritDoc}
     */
    public function setStylesheet($stylesheet)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setStylesheet', array($stylesheet));

        return parent::setStylesheet($stylesheet);
    }

    /**
     * {@inheritDoc}
     */
    public function getStylesheet()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getStylesheet', array());

        return parent::getStylesheet();
    }

    /**
     * {@inheritDoc}
     */
    public function setRawHeaders($rawHeaders)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setRawHeaders', array($rawHeaders));

        return parent::setRawHeaders($rawHeaders);
    }

    /**
     * {@inheritDoc}
     */
    public function getRawHeaders()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getRawHeaders', array());

        return parent::getRawHeaders();
    }

    /**
     * {@inheritDoc}
     */
    public function addHeader($name, $header)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addHeader', array($name, $header));

        return parent::addHeader($name, $header);
    }

    /**
     * {@inheritDoc}
     */
    public function setHeaders(array $headers = array (
))
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setHeaders', array($headers));

        return parent::setHeaders($headers);
    }

    /**
     * {@inheritDoc}
     */
    public function getHeaders()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getHeaders', array());

        return parent::getHeaders();
    }

    /**
     * {@inheritDoc}
     */
    public function setCreatedAt(\DateTime $createdAt = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCreatedAt', array($createdAt));

        return parent::setCreatedAt($createdAt);
    }

    /**
     * {@inheritDoc}
     */
    public function getCreatedAt()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCreatedAt', array());

        return parent::getCreatedAt();
    }

    /**
     * {@inheritDoc}
     */
    public function setUpdatedAt(\DateTime $updatedAt = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUpdatedAt', array($updatedAt));

        return parent::setUpdatedAt($updatedAt);
    }

    /**
     * {@inheritDoc}
     */
    public function getUpdatedAt()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUpdatedAt', array());

        return parent::getUpdatedAt();
    }

    /**
     * {@inheritDoc}
     */
    public function addChildren(\Sonata\PageBundle\Model\PageInterface $children)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addChildren', array($children));

        return parent::addChildren($children);
    }

    /**
     * {@inheritDoc}
     */
    public function getChildren()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getChildren', array());

        return parent::getChildren();
    }

    /**
     * {@inheritDoc}
     */
    public function setChildren($children)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setChildren', array($children));

        return parent::setChildren($children);
    }

    /**
     * {@inheritDoc}
     */
    public function getSnapshot()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSnapshot', array());

        return parent::getSnapshot();
    }

    /**
     * {@inheritDoc}
     */
    public function getSnapshots()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSnapshots', array());

        return parent::getSnapshots();
    }

    /**
     * {@inheritDoc}
     */
    public function setSnapshots($snapshots)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setSnapshots', array($snapshots));

        return parent::setSnapshots($snapshots);
    }

    /**
     * {@inheritDoc}
     */
    public function getTarget()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTarget', array());

        return parent::getTarget();
    }

    /**
     * {@inheritDoc}
     */
    public function addSnapshot(\Sonata\PageBundle\Model\SnapshotInterface $snapshot)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addSnapshot', array($snapshot));

        return parent::addSnapshot($snapshot);
    }

    /**
     * {@inheritDoc}
     */
    public function setTarget(\Sonata\PageBundle\Model\PageInterface $target = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setTarget', array($target));

        return parent::setTarget($target);
    }

    /**
     * {@inheritDoc}
     */
    public function addBlocks(\Sonata\PageBundle\Model\PageBlockInterface $blocs)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addBlocks', array($blocs));

        return parent::addBlocks($blocs);
    }

    /**
     * {@inheritDoc}
     */
    public function getBlocks()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getBlocks', array());

        return parent::getBlocks();
    }

    /**
     * {@inheritDoc}
     */
    public function setParent(\Sonata\PageBundle\Model\PageInterface $parent = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setParent', array($parent));

        return parent::setParent($parent);
    }

    /**
     * {@inheritDoc}
     */
    public function getParent($level = -1)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getParent', array($level));

        return parent::getParent($level);
    }

    /**
     * {@inheritDoc}
     */
    public function setParents(array $parents)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setParents', array($parents));

        return parent::setParents($parents);
    }

    /**
     * {@inheritDoc}
     */
    public function getParents()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getParents', array());

        return parent::getParents();
    }

    /**
     * {@inheritDoc}
     */
    public function setTemplateCode($templateCode)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setTemplateCode', array($templateCode));

        return parent::setTemplateCode($templateCode);
    }

    /**
     * {@inheritDoc}
     */
    public function getTemplateCode()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTemplateCode', array());

        return parent::getTemplateCode();
    }

    /**
     * {@inheritDoc}
     */
    public function disableBlockLazyLoading()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'disableBlockLazyLoading', array());

        return parent::disableBlockLazyLoading();
    }

    /**
     * {@inheritDoc}
     */
    public function disableChildrenLazyLoading()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'disableChildrenLazyLoading', array());

        return parent::disableChildrenLazyLoading();
    }

    /**
     * {@inheritDoc}
     */
    public function setDecorate($decorate)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDecorate', array($decorate));

        return parent::setDecorate($decorate);
    }

    /**
     * {@inheritDoc}
     */
    public function getDecorate()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDecorate', array());

        return parent::getDecorate();
    }

    /**
     * {@inheritDoc}
     */
    public function isHybrid()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isHybrid', array());

        return parent::isHybrid();
    }

    /**
     * {@inheritDoc}
     */
    public function isCms()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isCms', array());

        return parent::isCms();
    }

    /**
     * {@inheritDoc}
     */
    public function isInternal()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isInternal', array());

        return parent::isInternal();
    }

    /**
     * {@inheritDoc}
     */
    public function isDynamic()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isDynamic', array());

        return parent::isDynamic();
    }

    /**
     * {@inheritDoc}
     */
    public function isError()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isError', array());

        return parent::isError();
    }

    /**
     * {@inheritDoc}
     */
    public function __toString()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, '__toString', array());

        return parent::__toString();
    }

    /**
     * {@inheritDoc}
     */
    public function setPosition($position)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPosition', array($position));

        return parent::setPosition($position);
    }

    /**
     * {@inheritDoc}
     */
    public function getPosition()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPosition', array());

        return parent::getPosition();
    }

    /**
     * {@inheritDoc}
     */
    public function setUrl($url)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUrl', array($url));

        return parent::setUrl($url);
    }

    /**
     * {@inheritDoc}
     */
    public function getUrl()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUrl', array());

        return parent::getUrl();
    }

    /**
     * {@inheritDoc}
     */
    public function getContainerByCode($code)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getContainerByCode', array($code));

        return parent::getContainerByCode($code);
    }

    /**
     * {@inheritDoc}
     */
    public function getBlocksByType($type)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getBlocksByType', array($type));

        return parent::getBlocksByType($type);
    }

    /**
     * {@inheritDoc}
     */
    public function hasRequestMethod($method)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'hasRequestMethod', array($method));

        return parent::hasRequestMethod($method);
    }

    /**
     * {@inheritDoc}
     */
    public function setSite(\Sonata\PageBundle\Model\SiteInterface $site)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setSite', array($site));

        return parent::setSite($site);
    }

    /**
     * {@inheritDoc}
     */
    public function getSite()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSite', array());

        return parent::getSite();
    }

    /**
     * {@inheritDoc}
     */
    public function setEdited($edited)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setEdited', array($edited));

        return parent::setEdited($edited);
    }

    /**
     * {@inheritDoc}
     */
    public function getEdited()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getEdited', array());

        return parent::getEdited();
    }

    /**
     * {@inheritDoc}
     */
    public function setTitle($title)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setTitle', array($title));

        return parent::setTitle($title);
    }

    /**
     * {@inheritDoc}
     */
    public function getTitle()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTitle', array());

        return parent::getTitle();
    }

}
