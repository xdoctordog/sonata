<?php

namespace Proxies\__CG__\Application\Sonata\TimelineBundle\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Action extends \Application\Sonata\TimelineBundle\Entity\Action implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = array();



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return array('__isInitialized__', 'id', 'verb', 'statusCurrent', 'statusWanted', 'duplicateKey', 'duplicatePriority', 'duplicated', 'createdAt', 'actionComponents', 'timelines');
        }

        return array('__isInitialized__', 'id', 'verb', 'statusCurrent', 'statusWanted', 'duplicateKey', 'duplicatePriority', 'duplicated', 'createdAt', 'actionComponents', 'timelines');
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Action $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', array());
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', array());
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', array());

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function addComponent($type, $component, $actionComponentClass)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addComponent', array($type, $component, $actionComponentClass));

        return parent::addComponent($type, $component, $actionComponentClass);
    }

    /**
     * {@inheritDoc}
     */
    public function hasComponent($type)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'hasComponent', array($type));

        return parent::hasComponent($type);
    }

    /**
     * {@inheritDoc}
     */
    public function getComponent($type)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getComponent', array($type));

        return parent::getComponent($type);
    }

    /**
     * {@inheritDoc}
     */
    public function getSpreadTime()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSpreadTime', array());

        return parent::getSpreadTime();
    }

    /**
     * {@inheritDoc}
     */
    public function isPublished()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isPublished', array());

        return parent::isPublished();
    }

    /**
     * {@inheritDoc}
     */
    public function hasDuplicateKey()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'hasDuplicateKey', array());

        return parent::hasDuplicateKey();
    }

    /**
     * {@inheritDoc}
     */
    public function setIsDuplicated($duplicated)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setIsDuplicated', array($duplicated));

        return parent::setIsDuplicated($duplicated);
    }

    /**
     * {@inheritDoc}
     */
    public function isDuplicated()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isDuplicated', array());

        return parent::isDuplicated();
    }

    /**
     * {@inheritDoc}
     */
    public function getValidStatus()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getValidStatus', array());

        return parent::getValidStatus();
    }

    /**
     * {@inheritDoc}
     */
    public function isValidStatus($status)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isValidStatus', array($status));

        return parent::isValidStatus($status);
    }

    /**
     * {@inheritDoc}
     */
    public function getSubject()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSubject', array());

        return parent::getSubject();
    }

    /**
     * {@inheritDoc}
     */
    public function setId($id)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setId', array($id));

        return parent::setId($id);
    }

    /**
     * {@inheritDoc}
     */
    public function setVerb($verb)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setVerb', array($verb));

        return parent::setVerb($verb);
    }

    /**
     * {@inheritDoc}
     */
    public function getVerb()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getVerb', array());

        return parent::getVerb();
    }

    /**
     * {@inheritDoc}
     */
    public function setStatusCurrent($statusCurrent)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setStatusCurrent', array($statusCurrent));

        return parent::setStatusCurrent($statusCurrent);
    }

    /**
     * {@inheritDoc}
     */
    public function getStatusCurrent()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getStatusCurrent', array());

        return parent::getStatusCurrent();
    }

    /**
     * {@inheritDoc}
     */
    public function setStatusWanted($statusWanted)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setStatusWanted', array($statusWanted));

        return parent::setStatusWanted($statusWanted);
    }

    /**
     * {@inheritDoc}
     */
    public function getStatusWanted()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getStatusWanted', array());

        return parent::getStatusWanted();
    }

    /**
     * {@inheritDoc}
     */
    public function setDuplicateKey($duplicateKey)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDuplicateKey', array($duplicateKey));

        return parent::setDuplicateKey($duplicateKey);
    }

    /**
     * {@inheritDoc}
     */
    public function getDuplicateKey()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDuplicateKey', array());

        return parent::getDuplicateKey();
    }

    /**
     * {@inheritDoc}
     */
    public function setDuplicatePriority($duplicatePriority)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDuplicatePriority', array($duplicatePriority));

        return parent::setDuplicatePriority($duplicatePriority);
    }

    /**
     * {@inheritDoc}
     */
    public function getDuplicatePriority()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDuplicatePriority', array());

        return parent::getDuplicatePriority();
    }

    /**
     * {@inheritDoc}
     */
    public function setCreatedAt(\DateTime $createdAt)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCreatedAt', array($createdAt));

        return parent::setCreatedAt($createdAt);
    }

    /**
     * {@inheritDoc}
     */
    public function getCreatedAt()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCreatedAt', array());

        return parent::getCreatedAt();
    }

    /**
     * {@inheritDoc}
     */
    public function addActionComponent(\Spy\Timeline\Model\ActionComponentInterface $actionComponent)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addActionComponent', array($actionComponent));

        return parent::addActionComponent($actionComponent);
    }

    /**
     * {@inheritDoc}
     */
    public function getActionComponents()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getActionComponents', array());

        return parent::getActionComponents();
    }

    /**
     * {@inheritDoc}
     */
    public function addTimeline(\Spy\Timeline\Model\TimelineInterface $timeline)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addTimeline', array($timeline));

        return parent::addTimeline($timeline);
    }

    /**
     * {@inheritDoc}
     */
    public function getTimelines()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTimelines', array());

        return parent::getTimelines();
    }

}
